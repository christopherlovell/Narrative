lapply(xts.scores, aggregate_function, sum)
lapply(xts.search,apply.daily,sum)
temp <- lapply(xts.search,apply.daily,sum)
do.call(cbind.xts, lapply(temp, function(x) x / norm.aggregate))
norm.aggregate
temp
14/15
library(Narrative)
terms <- c("oil","crude","kuwait")
search.result <- as.matrix(dtm[,terms])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = do.call(c,meta(reuters,"character_count")))
xts.search
do.call(c,meta(reuters,"character_count"))
nrow(xts.search)
length(xts.search)
search.result <- as.matrix(dtm[,c("oil")])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search
lapply(xts.search, apply.daily, sum)
lapply(lapply(xts.search, apply.daily, sum), function(x) x/norm.aggregate)
norm.aggregate
do.call(cbind.xts, lapply(lapply(xts.search, apply.daily, sum), function(x) x/norm.aggregate))
library(Narrative)
search.result <- as.matrix(dtm[,c("oil")])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate
rm(xts.search.aggregate)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate
xts.search
lapply(xts.search, apply.daily, sum)
Narrative::xtsAggregate
terms <- c("oil","crude","kuwait")
search.result <- as.matrix(dtm[,terms])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = do.call(c,meta(reuters,"character_count")))
p <- ggplot2::autoplot(xts.search.aggregate)
p
library(Narrative)
search.result <- as.matrix(dtm[,c("oil")])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = T)
xts.search.aggregate
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = do.call(c,meta(reuters,"character_count")))
p <- ggplot2::autoplot(xts.search.aggregate) + ggplot2::stat_smooth()
p
terms <- c("oil","crude","kuwait")
search.result <- as.matrix(dtm[,terms])
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = do.call(c,meta(reuters,"character_count")))
p <- ggplot2::autoplot(xts.search.aggregate)
p
p <- ggplot2::autoplot(xts.search.aggregate,facets = NULL)
p
library(Narrative)
p <- zoo::autoplot.zoo(xts.search.aggregate, facets = NULL)
p
install.packages("/Users/324240/Downloads/rCharts-master.zip",type="source",repos=NULL)
library(rCharts)
source('~/.active-rstudio-document', echo=TRUE)
search.result
logicalMatch(search.result[,1:2],"OR")
logicalMatch(search.result[,1:2],"AND")
logicalMatch(search.result[,1:2],"AND",normalisation = min)
logicalMatch(search.result[,1:2],"OR",normalisation = sum)
logicalMatch(search.result[,1:2],"AND",normalisation = min)
reuters
reuters[[1]]
meta(reuters[[1]])
reuters[[-5]]
reuters[-5]
reuters2 <- reuters[-5]
meta(reuters[[4]])
meta(reuters[[5]])
meta(reuters[[6]])
meta(reuters2[[4]])
meta(reuters2[[5]])
apply(search.result[,1:2],2,all)
apply(search.result[,1:2],1,all)
search.result
head(search.result)
tail(search.result)
head(search.result)
Narrative::logicalMatch(search.result[,1:2],"AND")
library(Narrative)
Narrative::logicalMatch(search.result[,1:2],"AND")
Narrative::logicalMatch(search.result[,1:2],"AND",normalisation = sum)
normalisation = ""
is.character(normalisation)
FUN = NULL
FUN = NULL
library(Narrative)
Narrative::logicalMatch(search.result[,1:2],"AND",FUN = sum)
Narrative::logicalMatch(search.result[,1:2],"AND")
Narrative::logicalMatch(search.result[,1:2],"AND",FUN = sum)
Narrative::logicalMatch(search.result[,1:2], "OR", FUN = sum)
search.result[,1:2]
search.result
Narrative::logicalMatch(search.result[,2:1], "OR", FUN = sum)
Narrative::logicalMatch(search.result[,2:3], "OR", FUN = sum)
library(Narrative)
Narrative::tdmGenerator(1, reuters)
library(Narrative)
Narrative::tdmGenerator(1, reuters)
Narrative::tdmGenerator(2, reuters)
Narrative::tdmGenerator(5, reuters)
Narrative::tdmGenerator(1:2, reuters)
Narrative::tdmGenerator(c(1:2), reuters)
Narrative::tdmGenerator(seq(1:2), reuters)
Narrative::tdmGenerator(seq(1:2,by=1), reuters)
seq(1:2,by=1)
Narrative::tdmGenerator(seq(1,2,by=1), reuters)
seq(1,2,by=1)
str(seq(1,2,by=1))
Narrative::tdmGenerator(c(1,2), reuters)
Narrative::tdmGenerator(c(1,3), reuters)
Narrative::tdmGenerator(c(1,2), reuters)
positive_dictionary<-Narrative::readSeparateText("../inst/extdata/Dictionaries/excitement.txt")
meta(positive_dictionary[[1]],tag="heading")<-"positive"
negative_dictionary<-Narrative::readSeparateText("../inst/extdata/Dictionaries/anxiety.txt")
meta(negative_dictionary[[1]],tag="heading")<-"negative"
dictionaries<-c(positive_dictionary,negative_dictionary)
rm(positive_dictionary,negative_dictionary)
positive_dictionary<-Narrative::readSeparateText("/inst/extdata/Dictionaries/excitement.txt")
getwd()
positive_dictionary<-Narrative::readSeparateText("inst/extdata/Dictionaries/excitement.txt")
positive_dictionary<-Narrative::readSeparateText("//inst//extdata//Dictionaries//excitement.txt")
positive_dictionary<-Narrative::readSeparateText("inst//extdata//Dictionaries//excitement.txt")
getwd()
positive_dictionary<-Narrative::readSeparateText("inst//extdata")
positive_dictionary
meta(positive_dictionary,tag="heading") == "anxiety"
meta(positive_dictionary[[1]])
meta(positive_dictionary,tag="id") == "anxiety"
positive_dictionary[[meta(positive_dictionary,tag="id") == "anxiety"]]
positive_dictionary[meta(positive_dictionary,tag="id") == "anxiety"]
positive_dictionary[meta(positive_dictionary,tag="id") == "anxiety"][[1]]
dictionaries<-Narrative::readSeparateText("inst//extdata//dictionaries")
positive_dictionary[meta(positive_dictionary,tag="id") == "anxiety"][[1]]
positive_dictionary[meta(positive_dictionary,tag="id") == "anxiety"][[1]]$content
v <- Narrative::corpusSentiment(tdm = tdm,
corpus = reuters,
positive_dictionary = dictionaries[meta(dictionaries,tag="id") == "excitement"][[1]]$content,
negative_dictionary = dictionaries[meta(dictionaries,tag="id") == "anxiety"][[1]]$content,
normalisation.meta = "word_count")
v <- Narrative::corpusSentiment(tdm = tdm,
corpus = reuters,
dict.positive = dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content,
dict.negative = dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content,
normalisation.meta = "word_count")
v <- Narrative::corpusSentiment(tdm = t(dtm),
corpus = reuters,
dict.positive = dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content,
dict.negative = dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content,
normalisation.meta = "word_count")
v
dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content,
dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content
dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content
dtm
reuters[[1]]
dtm
inspect(dtm)
dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content
tolower(dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content)
v <- Narrative::corpusSentiment(tdm = t(dtm),
corpus = reuters,
dict.positive = tolower(dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content),
dict.negative = tolower(dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content),
normalisation.meta = "word_count")
v
reuters <- Narrative::addToMetaData(reuters, v[,1], tag="sentiment")
reuters <- Narrative::addToMetaData(reuters, v[,2], tag="positive.count")
reuters <- Narrative::addToMetaData(reuters, v[,3], tag="negative.count")
rm(v)
sentiment.time.series <- Narrative::xtsGenerate(do.call(c,meta(reuters,tag="datetimestamp")),do.call(c,meta(reuters,tag="sentiment")))
xts.sentiment <- Narrative::xtsGenerate(do.call(c,meta(reuters,tag="datetimestamp")),do.call(c,meta(reuters,tag="sentiment")))
xts.sentiment.aggregate <- Narrative::xtsAggregate(xts.sentiment, "daily")
xts.sentiment.aggregate <- Narrative::xtsAggregate(xts.sentiment, "daily", normalisation = T)
p<-autoplot(xts.sentiment.aggregate,main=("Sentiment")) + theme_bw()
p+xlab("Date")+ylab("Normalised Sentiment")+theme_bw()
p<-autoplot(xts.sentiment.aggregate,main=("Sentiment")) + theme_bw()
p
p<-ggplot2::autoplot(xts.sentiment.aggregate,main=("Sentiment")) + theme_bw()
p <- zoo::autoplot.zoo(xts.sentiment.aggregate,main=("Sentiment")) + theme_bw()
p <- zoo::autoplot.zoo(xts.sentiment.aggregate,main=("Sentiment")) + ggplot2::theme_bw()
p
xts.sentiment.aggregate
xts.sentiment.aggregate <- Narrative::xtsAggregate(xts.sentiment, "daily", normalisation = F)
p <- zoo::autoplot.zoo(xts.sentiment.aggregate,main=("Sentiment")) + ggplot2::theme_bw()
p
p <- zoo::autoplot.zoo(xts.sentiment.aggregate, main = ("Sentiment"))
p + ggplot2::xlab("Date") + ggplot2::ylab("Sentiment")
library(Narrative)
v <- Narrative::corpusSentiment(tdm = t(dtm),
dict.positive = tolower(dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content),
dict.negative = tolower(dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content),
normalisation.meta = "word_count")
head(v)
do.call(c,meta(reuters,"word_count"))
library(Narrative)
dictionaries<-Narrative::readSeparateText("inst//extdata//dictionaries")
library(Narrative)
dictionaries<-Narrative::readSeparateText("inst//extdata//dictionaries")
v <- Narrative::corpusSentiment(tdm = t(dtm),
dict.positive = tolower(dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content),
dict.negative = tolower(dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content),
normalisation.meta = do.call(c,meta(reuters,"word_count")))
head(v)
reuters <- Narrative::addToMetaData(reuters, v[,1], tag="sentiment")
reuters <- Narrative::addToMetaData(reuters, v[,2], tag="positive.count")
reuters <- Narrative::addToMetaData(reuters, v[,3], tag="negative.count")
rm(v)
xts.sentiment <- Narrative::xtsGenerate(do.call(c,meta(reuters,tag="datetimestamp")),do.call(c,meta(reuters,tag="sentiment")))
xts.sentiment.aggregate <- Narrative::xtsAggregate(xts.sentiment, "daily", normalisation = F)
p <- zoo::autoplot.zoo(xts.sentiment.aggregate, main = ("Sentiment"))
p + ggplot2::xlab("Date") + ggplot2::ylab("Sentiment")
Narrative::tdmGenerator(c(1,2,3), reuters)
Narrative::tdmGenerator(2, reuters)
tdm.2 <- Narrative::tdmGenerator(2, reuters)
tdm.2
inspect(tdm.2[1:10,1:10])
inspect(tdm.2[1:10,90:100])
tdm.2 <- Narrative::tdmGenerator(2, reuters)
tdm.2
inspect(tdm.2[90:100,1:10])
library(Narrative)
reuters.annotated <- Narrative::narrativeAnnotator(reuters, annotator = "sentence", metadata = T)
reuters.annotated[[1]]
reuters.annotated[[1]][1]
reuters.annotated[[1]][2]
reuters.annotated[[1]]
reuters <- VCorpus(DirSource(reut21578),readerControl = list(reader = readReut21578XMLasPlain))
reuters.annotated <- Narrative::narrativeAnnotator(reuters, annotator = "sentence", metadata = T)
reuters.annotated
reuters.annotated[[1]]
reuters.annotated[[1]][1]
reuters.annotated[[1]][1][1]
reuters.annotated[[1]][[1]]
reuters.annotated[[1]][[1]][1]
reuters.annotated[[1]]
reuters.annotated[[1]][[1]]
reuters.annotated[[1]][[1]][1]
reuters.annotated[[1]][[1]][2]
reuters.annotated[[1]][[1]][4]
reuters.annotated
Narrative::contextAnalyser(reuters.annotated,"oil")
Narrative::contextAnalyser(reuters.annotated,"oil")
Narrative::contextAnalyser(corpus = reuters.annotated, terms = "oil")
Narrative::contextAnalyser(corpus = reuters.annotated, terms = "futures")
Narrative::contextAnalyser(corpus = reuters[1:3].annotated, terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[1:3], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[1:4], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[1], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[[1]], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[[1:2]], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[1:2], terms = "oil", width = 0)
reuters.annotated
reuters.annotated[1:2]
Narrative::contextAnalyser(corpus = reuters.annotated[1:2], terms = "oil", width = 0)
lapply(reuters[1:2], function(x) which(base::grepl("oil",[[1]])))
lapply(reuters[1:2], function(x) which(base::grepl(c("oil"),[[1]])))
lapply(reuters, function(x) which(base::grepl("oil",[[1]])))
lapply(reuters, function(x) which(base::grepl("oil", [[1]])))
lapply(reuters, function(x) x)
lapply(reuters, function(x) which(base::grepl("oil", [[)))
lapply(reuters, function(x) which(base::grepl("oil", "[[")))
lapply(reuters, function(x) which(base::grepl("oil", x[[1]])))
reuters.annotated[[1]]
reuters.annotated[[1]][[1]]
Narrative::contextAnalyser(corpus = reuters.annotated[1], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated[[1]], terms = "oil", width = 0)
Narrative::contextAnalyser(corpus = reuters.annotated, terms = "oil", width = 0)
lapply(reuters.annotated[1:2], function(x) which(base::grepl("oil", x[[1]])))
Narrative::contextAnalyser(corpus = reuters.annotated[1:2], terms = "oil", width = 0)
reuters[[1]]
reuters[[0]]
reuters[[1]]
length(corpus)
library(Narrative)
Narrative::contextAnalyser(corpus = reuters.annotated[1:2], terms = "oil", width = 0)
library(Narrative)
library(Narrative)
Narrative::annotatorSearch(annotated.corpus = reuters.annotated[1:2], terms = "oil", width = 0)
Narrative::annotatorSearch(annotated.corpus = reuters.annotated[c(1,3)], terms = "oil", width = 0)
matched.sentences <- Narrative::contextAnalyser(reuters.annotated, "oil", width=0)
sentences<-tm::Corpus(tm::VectorSource(matched.sentence))
sentences.tdm<-Narrative::tdmGenerator(seq(1,2,by=1),sentences)
matched.sentences <- Narrative::annotatorSearch(reuters.annotated, "oil", width=0)
sentences<-tm::Corpus(tm::VectorSource(matched.sentence))
sentences.tdm<-Narrative::tdmGenerator(seq(1,2,by=1),sentences)
sentences<-tm::Corpus(tm::VectorSource(matched.sentences))
sentences.tdm<-Narrative::tdmGenerator(seq(1,2,by=1),sentences)
terms <- "oil"
matched.sentences <- Narrative::annotatorSearch(reuters.annotated, terms, width=0)
sentences <- tm::Corpus(tm::VectorSource(matched.sentences))
sentences.tdm <- Narrative::tdmGenerator(seq(1, 2, by=1), sentences)
logi <- rownames(sentences.tdm) %in% terms
sentences.tdm <- sentences.tdm[!logi,]  # remove original search term from tdm
m <- as.matrix(sentences.tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v,key="word")
wordcloud(d$word, d$freq, scale=c(4,1), max.words=200, min.freq=10, random.order=FALSE,
rot.per=0, fixed.asp=TRUE, use.r.layout=FALSE, colors=brewer.pal(9, "Reds"), random.color=FALSE)
rm(m,v,d,sentences,sentences.tdm,logi,search.vector,terms)
library(wordcloud)
terms <- "oil"
matched.sentences <- Narrative::annotatorSearch(reuters.annotated, terms, width=0)
sentences <- tm::Corpus(tm::VectorSource(matched.sentences))
sentences.tdm <- Narrative::tdmGenerator(seq(1, 2, by=1), sentences)
logi <- rownames(sentences.tdm) %in% terms
sentences.tdm <- sentences.tdm[!logi,]  # remove original search term from tdm
m <- as.matrix(sentences.tdm)
v <- sort(rowSums(m),decreasing=TRUE)
d <- data.frame(word = names(v),freq=v,key="word")
library(wordcloud)
wordcloud(d$word, d$freq, scale=c(4,1), max.words=200, min.freq=10, random.order=FALSE,
rot.per=0, fixed.asp=TRUE, use.r.layout=FALSE, colors=brewer.pal(9, "Reds"), random.color=FALSE)
rm(m,v,d,sentences,sentences.tdm,logi,search.vector,terms)
reuters.annotated
meta(reuters.annotated)
meta(reuters.annotated[[1]])
search.result <- as.matrix(dtm[,c("oil")])
search.result
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = search.result)
xts.search
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(reuters,"datetimestamp")),
value = rep(1,length(reuters)))
xts.search
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "daily",
normalisation = F)
xts.search.aggregate
dictionaries <- Narrative::readSeparateText("C:\\dev\\DataLab\\Narrative\\inst\\extdata\\dictionaries")
findFreqTerms(dtm,lowfreq = 15)
library(Narrative)
wd<-"C://dev//Datalab//Narrative"
#setwd(wd)
load(file=paste(wd,"//inst//extdata//Agencies//matched_materials.RData",sep=""))
library(Narrative)
library(ggplot2)
library(tm)
library(xts)
library(zoo)
library(RWeka)
#if(!require(openNLPmodels.en)){install.packages("openNLPmodels.en")}
if(!require(openNLP)){install.packages("openNLP")}
library(wordcloud)
library(reshape)
wd<-"C://dev//Datalab//Narrative_work"
#setwd(wd)
load(file=paste(wd,"//inst//extdata//Agencies//matched_materials.RData",sep=""))
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(corp.all,"DREDATE")),
value = do.call(c,meta(corp.all,"sentiment")))
positive_dictionary<-Narrative::readSeparateText(paste(wd,"//inst//extdata//Dictionaries//Financial//positive",sep=""))
meta(positive_dictionary[[1]],tag="heading")<-"positive"
negative_dictionary<-Narrative::readSeparateText(paste(wd,"//inst//extdata//Dictionaries//Financial//negative",sep=""))
meta(negative_dictionary[[1]],tag="heading")<-"negative"
dictionaries<-c(positive_dictionary,negative_dictionary)
rm(positive_dictionary,negative_dictionary)
corp.all <- Narrative::addToMetaData(corp.all,Narrative::wordCount(tdm.all.1),"count.word")
wd
wd<-"C://dev//Datalab//Narrative_work"
dictionaries <- Narrative::readSeparateText(paste(wd,"inst//extdata//dictionaries"))
dictionaries <- Narrative::readSeparateText(paste(wd,"inst//extdata//dictionaries"))
paste(wd,"inst//extdata//dictionaries")
dictionaries <- Narrative::readSeparateText(paste(wd,"inst//extdata//dictionaries",sep="//"))
corp.all <- Narrative::addToMetaData(corp.all,Narrative::wordCount(tdm.all.1),"count.word")
v <- Narrative::corpusSentiment(tdm = tdm.all.1,
dict.positive = tolower(dictionaries[meta(dictionaries,tag="id")=="excitement"][[1]]$content),
dict.negative = tolower(dictionaries[meta(dictionaries,tag="id")=="anxiety"][[1]]$content),
normalisation.meta = do.call(c,meta(corp.all,"count.word")))
corp.all<-Narrative::addToMetaData(corp.all,v[,1],tag="sentiment")
corp.all<-Narrative::addToMetaData(corp.all,v[,2],tag="positive.count")
corp.all<-Narrative::addToMetaData(corp.all,v[,3],tag="negative.count")
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(corp.all,"DREDATE")),
value = do.call(c,meta(corp.all,"sentiment")))
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",do.call(c,meta(corp.all,"count.word")))
sent.basket<-cbind(xts.sentiment.aggregate[c(-1,-length(xts.sentiment.aggregate))],xts.sentiment.aggregate2[c(-1,-length(xts.sentiment.aggregate2))])
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket, facets = NULL)
p
xts.search.aggregate2
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ .)
p
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ ., scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ ., aes(scales="free_y"))
p
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ ., scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ .) + facet(scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,facets = Series ~ .) + facet_grid(scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(corp.all,"DREDATE")),
value = do.call(c,meta(corp.all,"sentiment")))
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly")
#normalisation = do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",do.call(c,meta(corp.all,"count.word")))
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = F)#do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",do.call(c,meta(corp.all,"count.word")))
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = T)#do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",do.call(c,meta(corp.all,"count.word")))
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",F)
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",F)
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(corp.all,"DREDATE")),
value = do.call(c,meta(corp.all,"sentiment")))
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",F)
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
xts.search <- Narrative::xtsGenerate(time = do.call(c,meta(corp.all,"DREDATE")),
value = do.call(c,meta(corp.all,"sentiment")))
xts.search.aggregate <- Narrative::xtsAggregate(xts.search,
time_aggregate = "quarterly",
normalisation = T)#do.call(c,meta(corp.all,"count.word")))
xts.search <- xtsGenerate(do.call(c,meta(corp.all,"DREDATE")),rep(1:length(corp.all),1))
xts.search.aggregate2 <- xtsAggregate(xts.search,"quarterly",F)
sent.basket<-cbind(xts.search.aggregate[c(-1,-length(xts.search.aggregate))],xts.search.aggregate2[c(-1,-length(xts.search.aggregate2))])
p <- zoo::autoplot.zoo(sent.basket) + facet_grid(facets = Series ~ .,scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment / Document Count")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment / Document Count")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p + xlab("Date")
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment / Document Count")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p + xlab("Date") + ylab("Normalised Sentiment")
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment / Document Count")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p + xlab("Date") + ylab("Normalised Sentiment / Document Count")
p <- zoo::autoplot.zoo(sent.basket,main=("Sentiment / Document Count")) + theme_bw() + facet_grid(facets = Series ~ .,scales="free_y")
p + xlab("Date") + ylab("Document Count    Normalised Sentiment")
p + xlab("Date") + ylab("Document Count              Normalised Sentiment")
p + xlab("Date") + ylab("Document Count                          Normalised Sentiment")
