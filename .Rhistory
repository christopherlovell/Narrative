getwd()
setwd("C:\Users\324240\Desktop\yaacov_app\")
setwd("C:/Users/324240/Desktop/yaacov_app/")
getwd()
runApp()
library(shiny)
runApp()
runApp("interC/")
shiny::runApp('interC/wb')
install.packages("dplyr")
shiny::runApp('interC/wb')
install.packages("Cairo")
shiny::runApp('interC/wb')
library(miniCRAN)
addPackage("Cairo", path="Z:/Transfer/324240/miniCRANrepo", type="source"
)
addPackage("rgl", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("X11", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("x11", path="Z:/Transfer/324240/miniCRANrepo", type="source")
library("Rcpp", lib.loc="~/R/win-library/3.2")
addPackage("X11", path="Z:/Transfer/324240/miniCRANrepo", type="source")
install.packages("rgl")
install.packages("rgl")
library(rgl)
install.packages("rpivotTable")
install.packages("..//..//Downloads//rpivotTable-master.zip", type="source", repos=NULL)
library(rpivottable)
library(rpivotTable)
library("rpivotTable")
library("rpivotTable")
install.packages("..//..//Downloads//rpivotTable-master.zip", type="source", repos=NULL)
library(htmlwidgets)
install.packages("..//..//Downloads//htmlwidgets-master.zip", type="source", repos=NULL)
library(htmlwidgets)
install.packages("..//..//Downloads//htmlwidgets-master.zip", type="source", repos=NULL)
library(rpivotTable)
library(`rpivotTable-master`)
library(rpivotTable-master)
library("rpivotTable-master")
rpivotTable-master
?rpivotTable-master
install.packages("..//..//Downloads//rpivotTable-master.zip", type="source", repos=NULL)
install.packages("..//..//Downloads//rpivotTable-master.zip", type="source")
install.packages("..//..//Downloads//rpivotTable-master.zip", type="source", repos=NULL)
install.packages("..//..//Downloads//rpivotTable-master.zip", repos=NULL)
install.packages("..//..//Downloads//rpivotTable-master.zip", type = "source",repos=NULL)
getwd()
setwd("C:\Users\324240\Downloads")
setwd("C:\\Users\\324240\\Downloads")
install.packages("rpivotTable-master.zip", type = "source",repos=NULL)
library(devtools)
install_local("rpivotTable-master.zip")
library(rpivotTable)
data(mtcars)
## One line to create pivot table
rpivotTable(mtcars, rows="gear", col="cyl", aggregatorName="Average",
vals="mpg", rendererName="Treemap")
getwd()
setwd("C:/Users/324240/Desktop/rpivottable/")
runApp()
library(shiny)
runApp()
runApp()
rpivotTable(data = diamonds)
data(diamonds)
library(diamonds)
install.packages("diamonds")
library(ggplot2)
data(diamonds)
rpivotTable(data = diamonds)
data(mtcars)
shiny::runApp()
install.packages("shinydashboard")
shiny::runApp()
library(shiny)
library(shinydashboard)
library(rpivotTable)
library(ggplot2)
data(mtcars)
header <- dashboardHeader(title = "Data Profiler")
sidebar <- dashboardSidebar()
body <- dashboardBody(
tags$head(tags$style(
type = 'text/css',
'#test{ overflow-x: scroll; }'
)),
rpivotTableOutput("test")
)
shinyApp(
ui = dashboardPage(
header, sidebar, body),
server = function(input, output) {
output$test <- rpivotTable::renderRpivotTable({
rpivotTable(data = mtcars)
})
}
)
install.packages("shiny")
install.packages("shiny")
shiny::runApp()
shiny::runApp()
shiny::runApp('C:/Users/324240/Desktop/yaacov_app/interC/wb')
shiny::runApp()
addPackage("shinydashboard", path="Z:/Transfer/324240/miniCRANrepo", type="source"
)
library(miniCRAN)
addPackage("shinydashboard", path="Z:/Transfer/324240/miniCRANrepo", type="source")
#
addPackage("..\..\Downloads\rpivotTable-master.zip", path="Z:/Transfer/324240/miniCRANrepo", type="source", repos = NULL)
addPackage("..//..//Downloads//rpivotTable-master.zip", path="Z:/Transfer/324240/miniCRANrepo", type="source", repos = NULL)
addPackage("..//..//Downloads//rpivotTable-master.zip", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("..//..//Downloads//rpivotTable-master.zip", path="Z:/Transfer/324240/miniCRANrepo", type="source")
setwd("C:\\Users\324240\Downloads")
setwd("C:\\Users\\\324240\\Downloads")
setwd("C:\\Users\\324240\\Downloads")
addPackage("rpivotTable-master.zip", path="Z:/Transfer/324240/miniCRANrepo", type="source")
shiny::runApp('C:/Users/324240/Desktop/rpivottable')
addPackage("devtools", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("curl", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("htmlwidgets", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("shiny", path="Z:/Transfer/324240/miniCRANrepo", type="source")
addPackage("shiny", path="Z:/Transfer/324240/miniCRANrepo", type="source")
pkgs <- c("data.table", "dplyr", "ggplot2","shiny", "shinydashboard", "shinyBS","reshape2","png","shinyTree","igraph","tm","caret")
pkgDep(pkgs, enhances=TRUE)
new_columns <- function(temp){
res <-  matrix("",nrow(temp),8,dimnames=list(c(),c("Narrative.2","Narrative.3","Narrative.4","Narrative.5",
"Narrative.6","Narrative.7","Narrative.8","Narrative.9")))
i <- 1;
while(i <= nrow(temp)){
n <- 1;
# check to see if the first column of the row is empty
while(is.na(temp[i,1])){
res[i-n,n] <- as.character(temp[i,c("Narrative")])
n <- n+1;
i <- i+1;
}
i <- i+1;
print(i);
}
output <- cbind(temp,res)
output[!is.na(output$Account.Number),]
}
library(Narrative)
tdm.a <- generatetdm(reuters)
tdm.b <- TermDocumentMatrix(reuters,control=list(wordLengths=c(1,Inf)))
tdm.a
tdm.b
library(tm)
reut21578 <- system.file("texts", "crude", package = "tm")
reuters <- VCorpus(DirSource(reut21578),readerControl = list(reader = readReut21578XMLasPlain))
library(rbenchmark)
docs <- unlist(lapply(reuters, function(x) unname(content(x))))
ngrams <- Narrative::ngram_generator(docs, 1, delim = ' ')
generatetdm <- function(x){
docs <- unlist(lapply(x, function(x) gsub("[\r\n]", " ", content(x))))
ngrams <- Narrative::ngram_generator(docs, 1, delim = ' ')
v <- unlist(ngrams)
i <- names(v)
allTerms <- sort(unique(as.character(i)))
i <- match(i, allTerms)
j <- rep(seq_along(x), sapply(ngrams, length))
docs <- as.character(meta(x, "id", "local"))
tdm <- slam::simple_triplet_matrix(i, j, as.numeric(v),nrow = length(allTerms),
ncol = length(x), dimnames = list(Terms = allTerms, Docs = docs))
as.TermDocumentMatrix(tdm, weighting = weightTf)
}
benchmark(generatetdm(reuters),
TermDocumentMatrix(reuters))
tdm.a <- generatetdm(reuters)
tdm.b <- TermDocumentMatrix(reuters,control=list(wordLengths=c(1,Inf)))
tdm.a
tdm.b
inspect(tdm.a[(nrow(tdm.a)-10):nrow(tdm.a),])
inspect(tdm.b[(nrow(tdm.b)-10):nrow(tdm.b),])
library(Narrative)
tdm.a <- generatetdm(reuters)
tdm.b <- TermDocumentMatrix(reuters,control=list(wordLengths=c(1,Inf)))
tdm.a
tdm.b
inspect(tdm.a[1:10,])
inspect(tdm.b[1:10,])
benchmark(generatetdm(reuters),
TermDocumentMatrix(reuters))
N <- 30
benchmark(generatetdm(corp.clean[1:N]),
TermDocumentMatrix(corp.clean[1:N]))
wd<-"C://Users//324240//Desktop//Narrative_work/"
load(paste(wd,"Agency Text Mining//Data Matching//matched_materials.RData",sep=""))
N <- 30
benchmark(generatetdm(corp.clean[1:N]),
TermDocumentMatrix(corp.clean[1:N]))
N <- 40
benchmark(generatetdm(corp.clean[1:N]),
TermDocumentMatrix(corp.clean[1:N]))
N <- 80
benchmark(generatetdm(corp.clean[1:N]),
TermDocumentMatrix(corp.clean[1:N]))
N <- 160
benchmark(generatetdm(corp.clean[1:N]),
TermDocumentMatrix(corp.clean[1:N]))
